// <auto-generated />
using System;
using ClientManagement.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ClientManagement.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250116084031_Initial Migration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClientManagement.Core.Entities.Assessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("AssessmentId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsFinalized")
                        .HasColumnType("boolean");

                    b.Property<string>("LanguageTrainingNote")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PersonalSituationAdministrativeStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PersonalSituationFamily")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PersonalSituationFinancialSituation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PersonalSituationHealth")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PersonalSituationHousing")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProfessionalExpectationFrOralLanguageScore")
                        .HasColumnType("integer");

                    b.Property<int>("ProfessionalExpectationFrWrittenLanguageScore")
                        .HasColumnType("integer");

                    b.Property<bool>("ProfessionalExpectationItKnowledgeEmail")
                        .HasColumnType("boolean");

                    b.Property<bool>("ProfessionalExpectationItKnowledgeInternet")
                        .HasColumnType("boolean");

                    b.Property<bool>("ProfessionalExpectationItKnowledgeWord")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfessionalExpectationLongTerm")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfessionalExpectationMediumTerm")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProfessionalExpectationNlOralLanguageScore")
                        .HasColumnType("integer");

                    b.Property<int>("ProfessionalExpectationNlWrittentLanguageScore")
                        .HasColumnType("integer");

                    b.Property<string>("ProfessionalExpectationShortTermA")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfessionalExpectationShortTermB")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfessionalExpectationWorkingConditionConsultantNote")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfessionalExpectationWorkingConditionWhatIDontWant")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfessionalExpectationWorkingConditionWhatIWant")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfessionalExpectationWorkingConditionWhatMotivatesMe")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfessionalExperienceKnowledge")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfessionalExperienceNote")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfessionalExperiencePointToImprove")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfessionalExperienceProblemEncountered")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfessionalExperienceWhatsRewarding")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Softdelete")
                        .HasColumnType("boolean");

                    b.Property<string>("TrainingConsultantLanguageLearningNote")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TrainingConsultantNote")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TrainingDifficulty")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TrainingFacilitiesAndStrengths")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TrainingOpinion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TrainingPersonalImprovments")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Assessments");
                });

            modelBuilder.Entity("ClientManagement.Core.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<int>("CivilStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("HasChildren")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SocialWorkerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Softdelete")
                        .HasColumnType("boolean");

                    b.Property<string>("Ssn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("ClientManagement.Core.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("LanguageId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<bool>("Softdelete")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("ClientManagement.Core.Entities.MonitoringAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ActionId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Softdelete")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("MonitoringActions", (string)null);
                });

            modelBuilder.Entity("ClientManagement.Core.Entities.MonitoringReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionComment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("date");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MonitoringActionId")
                        .HasColumnType("integer");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<int>("SocialWorkerId")
                        .HasColumnType("integer");

                    b.Property<bool>("Softdelete")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("MonitoringActionId");

                    b.HasIndex("SocialWorkerId");

                    b.ToTable("MonitoringReports", (string)null);
                });

            modelBuilder.Entity("ClientManagement.Core.Entities.NatureOfContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("NatureOfContractId");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Softdelete")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("NatureOfContract");
                });

            modelBuilder.Entity("ClientManagement.Core.Entities.Profession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Softdelete")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Profession");
                });

            modelBuilder.Entity("ClientManagement.Core.Entities.ProfessionalAssessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AcquiredBehaviouralKnowledge")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AcquiredKnowHow")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AcquiredKnowledge")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("AssessmentId")
                        .HasColumnType("integer");

                    b.Property<string>("BehaviouralKnowledgeToDevelop")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("KnowHowToDevelop")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("KnowledgeToDevelop")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ProfessionId")
                        .HasColumnType("integer");

                    b.Property<bool>("Softdelete")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("ProfessionId");

                    b.ToTable("ProfessionalAssessments");
                });

            modelBuilder.Entity("ClientManagement.Core.Entities.ProfessionnalExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContextOfHiring")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Environment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Function")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NatureOfContractId")
                        .HasColumnType("integer");

                    b.Property<string>("ReasonEndOfContract")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Softdelete")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Task")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TypeOfContract")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("NatureOfContractId");

                    b.ToTable("ProfessionnalExperience");
                });

            modelBuilder.Entity("ClientManagement.Core.Entities.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Softdelete")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("School");
                });

            modelBuilder.Entity("ClientManagement.Core.Entities.SchoolRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<int>("CourseLevel")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EnDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("Result")
                        .HasColumnType("integer");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer");

                    b.Property<bool>("Softdelete")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TrainingId")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("TrainingId");

                    b.HasIndex("TrainingTypeId");

                    b.ToTable("SchoolRegistrations");
                });

            modelBuilder.Entity("ClientManagement.Core.Entities.SocialWorker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Softdelete")
                        .HasColumnType("boolean");

                    b.Property<string>("TeamAcronym")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SocialWorker");
                });

            modelBuilder.Entity("ClientManagement.Core.Entities.Support", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("ReasonOfClosure")
                        .HasColumnType("text");

                    b.Property<int>("SocialWorkerId")
                        .HasColumnType("integer");

                    b.Property<bool>("Softdelete")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("SocialWorkerId");

                    b.ToTable("Supports");
                });

            modelBuilder.Entity("ClientManagement.Core.Entities.Training", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Softdelete")
                        .HasColumnType("boolean");

                    b.Property<int>("TrainingFieldId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TrainingFieldId");

                    b.ToTable("Training");
                });

            modelBuilder.Entity("ClientManagement.Core.Entities.TrainingField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Softdelete")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("TrainingField");
                });

            modelBuilder.Entity("ClientManagement.Core.Entities.TrainingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastModifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Softdelete")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("TrainingType");
                });

            modelBuilder.Entity("ClientManagement.Core.Entities.Assessment", b =>
                {
                    b.HasOne("ClientManagement.Core.Entities.Client", "Client")
                        .WithMany("Assessments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ClientManagement.Core.Entities.Client", b =>
                {
                    b.OwnsOne("ClientManagement.Core.ValueObjects.Language", "ContactLanguage", b1 =>
                        {
                            b1.Property<int>("ClientId")
                                .HasColumnType("integer");

                            b1.Property<string>("SpokenLanguage")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ClientId");

                            b1.ToTable("Clients");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.OwnsOne("ClientManagement.Core.ValueObjects.Phone", "MobilePhone", b1 =>
                        {
                            b1.Property<int>("ClientId")
                                .HasColumnType("integer");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ClientId");

                            b1.ToTable("Clients");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.OwnsOne("ClientManagement.Core.ValueObjects.Language", "NativeLanguage", b1 =>
                        {
                            b1.Property<int>("ClientId")
                                .HasColumnType("integer");

                            b1.Property<string>("SpokenLanguage")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ClientId");

                            b1.ToTable("Clients");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.OwnsOne("ClientManagement.Core.ValueObjects.Phone", "Phone", b1 =>
                        {
                            b1.Property<int>("ClientId")
                                .HasColumnType("integer");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ClientId");

                            b1.ToTable("Clients");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.OwnsOne("ClientManagement.Core.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<int>("ClientId")
                                .HasColumnType("integer");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ClientId");

                            b1.ToTable("Clients");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.OwnsOne("ClientManagement.Core.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<int>("ClientId")
                                .HasColumnType("integer");

                            b1.Property<string>("EmailAddress")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ClientId");

                            b1.ToTable("Clients");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("ContactLanguage")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("MobilePhone")
                        .IsRequired();

                    b.Navigation("NativeLanguage")
                        .IsRequired();

                    b.Navigation("Phone")
                        .IsRequired();
                });

            modelBuilder.Entity("ClientManagement.Core.Entities.MonitoringReport", b =>
                {
                    b.HasOne("ClientManagement.Core.Entities.Client", "Client")
                        .WithMany("MonitoringReports")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClientManagement.Core.Entities.MonitoringAction", "MonitoringAction")
                        .WithMany("MonitoringReports")
                        .HasForeignKey("MonitoringActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClientManagement.Core.Entities.SocialWorker", "SocialWorker")
                        .WithMany("MonitoringReports")
                        .HasForeignKey("SocialWorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("MonitoringAction");

                    b.Navigation("SocialWorker");
                });

            modelBuilder.Entity("ClientManagement.Core.Entities.ProfessionalAssessment", b =>
                {
                    b.HasOne("ClientManagement.Core.Entities.Assessment", "Assessment")
                        .WithMany("BilanProfessions")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClientManagement.Core.Entities.Profession", "Profession")
                        .WithMany()
                        .HasForeignKey("ProfessionId");

                    b.Navigation("Assessment");

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("ClientManagement.Core.Entities.ProfessionnalExperience", b =>
                {
                    b.HasOne("ClientManagement.Core.Entities.Client", "Client")
                        .WithMany("ProfessionnalExpectations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClientManagement.Core.Entities.NatureOfContract", "NatureOfContract")
                        .WithMany()
                        .HasForeignKey("NatureOfContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("NatureOfContract");
                });

            modelBuilder.Entity("ClientManagement.Core.Entities.SchoolRegistration", b =>
                {
                    b.HasOne("ClientManagement.Core.Entities.Client", "Client")
                        .WithMany("SchoolRegistrations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClientManagement.Core.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClientManagement.Core.Entities.Training", "Training")
                        .WithMany()
                        .HasForeignKey("TrainingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClientManagement.Core.Entities.TrainingType", "TrainingType")
                        .WithMany()
                        .HasForeignKey("TrainingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("School");

                    b.Navigation("Training");

                    b.Navigation("TrainingType");
                });

            modelBuilder.Entity("ClientManagement.Core.Entities.Support", b =>
                {
                    b.HasOne("ClientManagement.Core.Entities.Client", "Client")
                        .WithMany("Supports")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClientManagement.Core.Entities.SocialWorker", "SocialWorker")
                        .WithMany("Supports")
                        .HasForeignKey("SocialWorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("SocialWorker");
                });

            modelBuilder.Entity("ClientManagement.Core.Entities.Training", b =>
                {
                    b.HasOne("ClientManagement.Core.Entities.TrainingField", "TrainingField")
                        .WithMany()
                        .HasForeignKey("TrainingFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainingField");
                });

            modelBuilder.Entity("ClientManagement.Core.Entities.Assessment", b =>
                {
                    b.Navigation("BilanProfessions");
                });

            modelBuilder.Entity("ClientManagement.Core.Entities.Client", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("MonitoringReports");

                    b.Navigation("ProfessionnalExpectations");

                    b.Navigation("SchoolRegistrations");

                    b.Navigation("Supports");
                });

            modelBuilder.Entity("ClientManagement.Core.Entities.MonitoringAction", b =>
                {
                    b.Navigation("MonitoringReports");
                });

            modelBuilder.Entity("ClientManagement.Core.Entities.SocialWorker", b =>
                {
                    b.Navigation("MonitoringReports");

                    b.Navigation("Supports");
                });
#pragma warning restore 612, 618
        }
    }
}
